package org.ling.ldbot.discord.suggest;


import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import net.dv8tion.jda.api.interactions.modals.Modal;
import org.bukkit.Bukkit;
import org.jetbrains.annotations.NotNull;
import org.ling.ldbot.discord.DiscordCommands;
import org.ling.ldbot.main.LDBot;

import java.awt.*;
import java.time.Instant;
import java.util.Objects;

public class Suggest extends ListenerAdapter {

    private final LDBot plugin;

    public Suggest(LDBot plugin) {
        this.plugin = plugin;
    }


    public static final String getSuggestTitleId() {
        return "suggestTitleId";
    }

    public static final String getSuggestTextId() {
        return "suggestTextId";
    }

    public static final String getSuggestModalId() {
        return "suggestModalId";
    }

    @Override
    public void onSlashCommandInteraction(@NotNull SlashCommandInteractionEvent event) {
        if (event.getName().equals(DiscordCommands.getSuggestCommandId())) {

            TextInput suggestTitle = TextInput.create(getSuggestTitleId(), "[üìå] –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", TextInputStyle.SHORT)
                    .setRequired(true)
                    .setMaxLength(25)
                    .build();

            TextInput suggestText = TextInput.create(getSuggestTextId(), "[üìÑ] –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", TextInputStyle.PARAGRAPH)
                    .setRequired(true)
                    .setMaxLength(500)
                    .build();

            Modal modal = Modal.create(getSuggestModalId(), "[üí°] –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
                    .addActionRows(
                            ActionRow.of(suggestTitle),
                            ActionRow.of(suggestText))
                    .build();

            event.replyModal(modal).queue();
        }
    }

    @Override
    public void onModalInteraction(@NotNull ModalInteractionEvent event) {
        if (event.getModalId().equals(getSuggestModalId())) {
            if (Objects.equals(plugin.getConfig().getString("suggests.suggestChannelId"), null) || plugin.getConfig().getString("suggests.suggestChannelId").isEmpty()) {
                Bukkit.getLogger().warning("The value for [suggests.suggestChannelId] is incorrect.");
                return;
            }

            TextChannel suggestChannel = plugin.getJda().getTextChannelById(plugin.getConfig().getString("suggests.suggestChannelId"));

            EmbedBuilder embedBuilder = new EmbedBuilder()
                    .setTimestamp(Instant.now())
                    .setColor(Color.decode("#0099ff"))
                    .setTitle("[üí°] –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç - " + event.getUser().getName())
                    .setDescription(event.getValue(getSuggestTitleId()).getAsString() + "\n```text\n" + event.getValue(getSuggestTextId()).getAsString() + "\n```");


            suggestChannel.sendMessage("").setEmbeds(embedBuilder.build()).queue(message -> {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
                message.createThreadChannel("–û–±—Å—É–∂–¥–µ–Ω–∏–µ: " + event.getValue(getSuggestTitleId()).getAsString()).queue();
                message.addReaction(Emoji.fromUnicode("üëç")).queue();
                message.addReaction(Emoji.fromUnicode("üëé")).queue();
            }, throwable -> {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                throwable.printStackTrace();
            });

            event.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!").setEphemeral(true).queue();
        }
    }
}
